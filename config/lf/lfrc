

# Basic Settings
set hidden true
set ignorecase true
set icons true
set scrolloff 10
set number true
set relativenumber true

set cursorpreviewfmt "\033[7;2m"
set dupfilefmt '%f.~%n' # defalt is '%f.~%n~'

set shell sh
set shellopts '-eu'
set ifs "\n"
set info 'size'
set dircounts true


#############################################################mapping
#
# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
# change to remove
cmd trash %[ ${2-y} = "y" ] && trash -v $fx
map T push :trash<space>([y]/n)<space>

cmd remove %[ ${2-y} = "y" ] && rm -rv $fx
map D push :remove<space>([y]/n)<space>
map x cut

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        # application/*) lf -remote "send $id \$\$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}
# dedicated keys for file opener actions
map o open

# mkdir command. See wiki if you want it to select created dir
map d :push %mkdir<space>-p<space>

# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv -v $f $1
cmd rename_ui &{{
    # file=$(echo $f | tr " " "<space>")
    file=${f// /<space>}
    lf -remote "send $id push :rename<space>'$file'<left>"
}}
map r rename_ui

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    for fi in $fx; do
    case $fi in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $fi;;
        *.tar.gz|*.tgz) tar xzvf $fi;;
        *.tar.xz|*.txz) tar xJvf $fi;;
        *.tar.zst|*.zst) tar xaf $fi;;
        # *.zip) unzip $fi -d $(basename $fi .zip);;
        *.zip) 7z x -o$(basename $fi .zip) $fi;;
        *.rar) unrar x -o- $fi;;
        *.7z) 7z x -o$(basename $fi .7z) $fi;;
    esac
    done
}}
map zx push :extract<space>

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    zip -rv $f.zip $f
}}
map zz push :zip<space>

# Movement
map gd cd ~/Downloads
map gD cd ~/Documents
map gc cd ~/.config
map gw cd ~/Workspaces
# map gl cd /run/media/learning
map gh cd ~/Workspaces/HK6
# map gm cd /run/media

# fzf
cmd fzf_jump ${{
    res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
    if [ -n "$res" ]; then
        # if [ -d "$res" ]; then
        #     cmd="cd"
        # else
        #     cmd="select"
        # fi
        cmd="select"
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}
map f fzf_jump

# tmux
cmd create-tmux-session %{{
    name=${1-$(basename $(dirname $f))}
    lowercase=$(echo $name | tr . _ | tr '[:upper:]' '[:lower:]')
    tmux new -s $lowercase -d
    echo "created tmux session '$lowercase'"
}}
# map s push :create-tmux-session<space>

cmd create-tmux-window %{{
    name=${1-$(basename $(dirname $f))}
    lowercase=$(echo $name | tr . _ | tr '[:upper:]' '[:lower:]')
    tmux new-window -n $name -d
    echo "created tmux window '$name'"
}}
# map w push :create-tmux-window<space>

# copy path to clipboard
cmd copy-path &{{
    case $(echo "$HOME") in
        /home/*) echo -n "$f" | xclip -selection clipboard;;
        /Users/*) echo "$f" | pbcopy;;
        *) echo "$f" | Set-Clipboard;;
    esac
    lf -remote "send $id %echo \"copied path: '$f'\""
}}
map รง copy-path

# drap and drop
cmd drag-drop %dragon-drop -a $fx
# map <a-d> drag-drop

# select-all
cmd select-all :unselect; invert
cmd toggle-select-all &{{
    [[ ! -z $fs ]] && cmd='unselect' || cmd='invert'
    lf -remote "send $id $cmd"
}}
map รฅ toggle-select-all 

# info
cmd info &{{
    lf -remote "send $id %echo \"info: '$f'\""
}}

cmd get-size ${{
    echo "Getting Size... '$(dirname $f)'"
    # df -h | grep "Use\|home\|media"
    lines=${1-20}
    du -a --si . | sort -h | tail -n $lines
    echo "Dir: '$(dirname $f)'"
    df -H ~ .
    read
}}
map S push :get-size<space>20

cmd play-mpv ${{
    ls *.{mp4,mkv} | sort -V | mpv --playlist=-
}}
map P :push :play-mpv<space>

cmd anime ${{
    webtorrent "$(pbpaste)" --mpv --player-args="--volume=90"
}}
map A anime
